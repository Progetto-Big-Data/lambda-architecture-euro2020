version: '3'
services:
    zookeeper:
        container_name: zookeeper
        image: 'bitnami/zookeeper:latest'
        ports:
          - '2181:2181'
        environment:
          - ALLOW_ANONYMOUS_LOGIN=yes
    kafka:
        container_name: kafka
        image: 'bitnami/kafka:latest'
        ports:
          - '9092:9092'
        environment:
          - KAFKA_BROKER_ID=1
          - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
          - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
          - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
          - ALLOW_PLAINTEXT_LISTENER=yes
        depends_on:
          - zookeeper


    mongodb:
        image: mongo:latest
        container_name: mongodb
        ports:
            - 27017:27017
        environment: 
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: secret
        volumes: 
            - mongodb_data_container:/data/db


    charts:
      build:
        context: 'docker/charts'
        args:
          - EMAIL=admin@mail.com
          - PASSWORD=secret
      image: 84c23ddf6527
      ports:
        - 8080:80
      environment:
        CHARTS_SUPPORT_WIDGET_AND_METRICS: 'on'
        CHARTS_MONGODB_URI: 'mongodb://root:secret@mongodb:27017'
      volumes:
        - keys:/mongodb-charts/volumes/keys
        - logs:/mongodb-charts/volumes/logs
        - db-certs:/mongodb-charts/volumes/db-certs
        - web-certs:/mongodb-charts/volumes/web-certs
      depends_on:
        - mongodb
      container_name: charts

    dask-scheduler:
      build:
        context: ./docker/dask
        dockerfile: Dockerfile
      image: daskdev/dask
      hostname: dask-scheduler
      ports:
        - "8786:8786"
        - "8787:8787"
      command: ["dask-scheduler"]
      container_name: dask-scheduler
  
    dask-worker:
      build:
        context: ./docker/dask
        dockerfile: Dockerfile
      image: daskdev/dask
      hostname: dask-worker
      command: ["dask-worker", "tcp://dask-scheduler:8786"]
      container_name: dask-worker

    namenode:
      image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
      container_name: namenode
      restart: always
      ports:
        - 9870:9870
        - 9000:9000
      volumes:
        - hadoop_namenode:/hadoop/dfs/name
      environment:
        - CLUSTER_NAME=test
      env_file:
        - ./docker/hadoop.env

    datanode:
      image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
      container_name: datanode
      restart: always
      volumes:
        - hadoop_datanode:/hadoop/dfs/data
      environment:
        SERVICE_PRECONDITION: "namenode:9870"
      env_file:
        - ./docker/hadoop.env
    
    resourcemanager:
      image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
      container_name: resourcemanager
      restart: always
      environment:
        SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
      env_file:
        - ./docker/hadoop.env

    nodemanager1:
      image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
      container_name: nodemanager
      restart: always
      environment:
        SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
      env_file:
        - ./docker/hadoop.env
    
    historyserver:
      image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
      container_name: historyserver
      restart: always
      environment:
        SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
      volumes:
        - hadoop_historyserver:/hadoop/yarn/timeline
      env_file:
        - ./docker/hadoop.env

volumes: 
    mongodb_data_container:
    keys:
    logs:
    db-certs:
    web-certs:
    hadoop_namenode:
    hadoop_datanode:
    hadoop_historyserver: